{"version":3,"sources":["config.js","GameStore.js","RulesSummaryButton.js","DemonAISummaryButton.js","Welcome.js","GameStateSummary.js","GamePhaseHeader.js","EventMessage.js","InitiativePhase.js","HumanActionPhase.js","ThreatPhase.js","GamePhaseBody.js","DemonActionPhase.js","App.js","serviceWorker.js","index.js"],"names":["SCENARIOS","THE_SURVIVORS","name","demon","demonLimit","HOLDING_BACK_THE_INVASION","HIT_THEM_WHERE_IT_HURTS","THE_RITUAL","THE_POSSESSED","WHO_DARES_WINS","PHASES","INITIATIVE","HUMAN_ACTION","THREAT","DEMON_ACTION","THREAT_PHASE_STEPS","DEMON_WARRIORS","DEMON_OF_COMBAT","health","movement","combat","defense","rules","DEMON_OF_CRUELTY","DEMON_OF_DESTRUCTION","MASTER_OF_SOULS","POSSESSED_ONE","TOUGH_TROGLODYTE","TROGLODYTE","UNDERGROUND_HUNTER","EVENTS","CAVE_IN","getDescription","game","scenario","phase","CRISIS_OF_FAITH","description","DEFECT","DEMONIC_RAGE","checkRelevent","demonsInPlay","DEMONIC_POSSESSION","PANIC","SUICIDE_ATTACK","trogsInPlay","TERROR","THEY_ARE_LEGION","complete","toughTrogsInPlay","TOXIC_FUMES","TRAP","UNDER_THE_SIGN_OF_SATAN","GameStore","turn","demonsAdded","demonDice","threatDice","threatRoll","threatStep","eventRequired","legalPlacement","trogsFar","trogsClose","trogsSupernaturalSpeed","trogsSharpenedClaws","oilForYourLamp","event","this","startPhase","checkEventPlays","maybeRemoveEvent","getRandomNumber","keys","Object","key","length","eventConfig","removeEvent","arguments","undefined","completePhase","maybeRequireEvent","Math","max","min","initThreatPhase","lowerDemonDie","drawEvent","completeThreatPhase","trogsAdded","floor","random","decorate","observable","RulesSummaryButton","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleOpen","setState","open","handleClose","state","_this$props","ButtonComponent","as","buttonProps","objectWithoutProperties","react_default","a","createElement","Portal","closeOnTriggerClickk","openOnTriggerClick","trigger","onOpen","onClose","Modal","closeOnDimmerClick","Header","Content","Actions","Button","content","onClick","PureComponent","defaultProps","DemonAISummaryButton","style","color","Subheader","Divider","Welcome","_this2","src_RulesSummaryButton","cursor","src_DemonAISummaryButton","target","href","Dropdown","placeholder","search","selection","options","map","value","text","onChange","_ref","fluid","Group","vertical","primary","disabled","startGame","Component","DemonWarriorItem","numberInPlay","onRemove","warrior","List","Item","Popup","inverted","icon","floated","size","compact","basic","concat","Label","circular","horizontal","Rating","defaultRating","maxRating","renderHTML","observer","_ref2","demonWarriors","Segment","padding","Grid","stackable","Row","stretched","Column","width","verticalAlign","GameStateSummary_DemonWarriorItem","removeDemon","getDemon","removeToughTrog","removeTrog","text2","Step","unstackable","active","Description","Message","negative","float","error","Menu","direction","src_EventMessage","setOilForYourLamp","Icon","completeInitiativePhase","auraOfBlessing","demonicMechanismTile","addDemon","anyOtherTile","completeHumanActionPhase","SpawnTrogsStep","render","_this$state","maxTrogs","Input","label","type","_ref4","completeThreatSpawnTrogsStep","parseInt","STEPS_CONFIG","THREAT_EVENT","component","completeThreatEventStep","CHECK_LEGAL_PLACEMENT","Checkbox","checked","completeThreatLegalPlacementStep","SPAWN_DEMON","_ref3","completeThreatSpawnDemonStep","SPAWN_TROGS","CHECK_TROGS_DISTANCE","_ref5","InitiativePhase","HumanActionPhase","_ref6","StepComponent","completeDemonActionPhase","BodyComponent","MainMenu","top","position","zIndex","window","location","reload","ScenarioTitle","left","App","Container","maxWidth","margin","background","marginTop","src","alt","height","App_MainMenu","App_ScenarioTitle","src_Welcome","src_GamePhaseHeader","src_GamePhaseBody","src_GameStateSummary","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cf88b5b2.chunk.js","sourcesContent":["const SCENARIOS = {\n  THE_SURVIVORS: {\n    name: 'The Survivors',\n    demon: 'UNDERGROUND_HUNTER',\n    demonLimit: 2,\n  },\n  HOLDING_BACK_THE_INVASION: {\n    name: 'Holding Back The Invasion',\n    demon: 'DEMON_OF_COMBAT',\n    demonLimit: 2,\n  },\n  HIT_THEM_WHERE_IT_HURTS: {\n    name: 'Hit Them Where It Hurts',\n    demon: 'MASTER_OF_SOULS',\n    demonLimit: 0,\n  },\n  THE_RITUAL: {\n    name: 'The Ritual',\n    demon: 'DEMON_OF_CRUELTY',\n    demonLimit: 2,\n  },\n  THE_POSSESSED: {\n    name: 'The Possessed',\n    demonLimit: 0,\n  },\n  WHO_DARES_WINS: {\n    name: 'Who Dares, Wins',\n    demon: 'DEMON_OF_DESTRUCTION',\n    demonLimit: 2,\n  },\n}\n\nconst PHASES = {\n  INITIATIVE: 'INITIATIVE',\n  HUMAN_ACTION: 'HUMAN_ACTION',\n  THREAT: 'THREAT',\n  DEMON_ACTION: 'DEMON_ACTION',\n}\n\nconst THREAT_PHASE_STEPS = {\n  THREAT_EVENT: 'THREAT_EVENT',\n  CHECK_LEGAL_PLACEMENT: 'CHECK_LEGAL_PLACEMENT',\n  SPAWN_DEMON: 'SPAWN_DEMON',\n  SPAWN_TROGS: 'SPAWN_TROGS',\n  CHECK_TROGS_DISTANCE: 'CHECK_TROGS_DISTANCE',\n}\n\nconst DEMON_WARRIORS = {\n  DEMON_OF_COMBAT: {\n    name: 'Demon of Combat',\n    health: 3,\n    movement: 1,\n    combat: 4,\n    defense: 4,\n    rules: `<strong>Impressive</strong> and <strong>Bodyguard</strong>`,\n  },\n  DEMON_OF_CRUELTY: {\n    name: 'Demon of Cruelty',\n    health: 3,\n    movement: 1,\n    combat: 0,\n    defense: 4,\n    rules: `All Troglodytes are <strong>Frantic</strong>.<br />\n        An additional Troglodyte will be added during the Threat phase.`,\n  },\n  DEMON_OF_DESTRUCTION: {\n    name: 'Demon of Desctruction',\n    health: 4,\n    movement: 2,\n    combat: 1,\n    defense: 4,\n    rules: `Gain <strong>+3 CBT</strong> when sharing a tile with 2 or more Human\n      warriors.`,\n  },\n  MASTER_OF_SOULS: {\n    name: 'Master of Souls',\n    health: 10,\n    movement: 0,\n    combat: 2,\n    defense: 4,\n    rules: `<strong>Blessed Hammer</strong> only causes 2 wounds per hit.<br />\n        <strong>Blunderbuss</strong> cannot cause any wounds in ranged combat.`,\n  },\n  POSSESSED_ONE: {\n    name: 'Possessed One',\n    health: 4,\n    movement: 2,\n    combat: 2,\n    defense: 4,\n    rules: `<strong>Blessed Hammer</strong> only causes 2 wounds per hit.<br />\n        All Troglodytes on the same tile are <strong>Bodyguards</strong>.<br />\n        Becomes a Human warrior once exorcised (defeated).`,\n  },\n  TOUGH_TROGLODYTE: {\n    name: 'Tough Troglodyte',\n    health: 1,\n    movement: 2,\n    combat: 1,\n    defense: 5,\n    rules: `This Troglodyte is <strong>Frantic</strong>.`,\n  },\n  TROGLODYTE: {\n    name: 'Troglodyte',\n    health: 1,\n    movement: 1,\n    combat: 1,\n    defense: 3,\n  },\n  UNDERGROUND_HUNTER: {\n    name: 'Underground Hunter',\n    health: 4,\n    movement: 2,\n    combat: 1,\n    defense: 4,\n    rules: `Gain <strong>+1 CBT</strong> per Line of Action canclled on the\n      target.`,\n  },\n}\n\nconst EVENTS = {\n  CAVE_IN: {\n    name: 'Cave-In',\n    getDescription: game => {\n      if (game.scenario === 'THE_SURVIVORS') {\n        return `Place a cave-in token on the tile opening with Fresh Air.\n          If the Exit tile is already in play, place the token on an opening of\n          the Exit tile connected to another tile.<br><br>\n          Until the cave-in is cleared, no warrior can cross this opening.<br><br>\n          Clearing the cave-in requires a combat action with at least CBT 2 from\n          a tile adjacent to the blocked opening. Remove the token once the\n          cave-in is cleared.`\n      }\n      return `Place a cave-in token on a tile opening separating\n        Human warriors on adjacent tiles. Ignore this event, if there are no\n        humans on adjacent tiles.<br><br>\n        Until the cave-in is cleared, no warrior can cross this opening.<br><br>\n        Clearing the cave-in requires a combat action with at least CBT 2 from\n        a tile adjacent to the blocked opening. Remove the token once the\n        cave-in is cleared.`\n    },\n    phase: PHASES.THREAT,\n  },\n  CRISIS_OF_FAITH: {\n    name: 'Crisis of Faith',\n    description: 'Gifts are cancelled this phase.',\n    phase: PHASES.HUMAN_ACTION,\n  },\n  DEFECT: {\n    name: 'Defect',\n    description: 'Discard an Object card of your choice.',\n    phase: PHASES.THREAT,\n  },\n  DEMONIC_RAGE: {\n    name: 'Demonic Rage',\n    description: 'The Demon is <strong>Frantic</strong>.',\n    phase: PHASES.THREAT,\n    checkRelevent: game => game.demonsInPlay > 0,\n  },\n  DEMONIC_POSSESSION: {\n    name: 'Demonic Possession',\n    description: `The Condemned warrior with the highest CBT and is on a tile\n      with at least 1 other Human warrior attacks another Human warrior on that\n      tile (lowest DEF if multiple to choose from).\n      He cannot use a Grenade, or his Bodyguard Talent.`,\n    phase: PHASES.THREAT,\n  },\n  PANIC: {\n    name: 'Panic!',\n    description: `Assign Action Dice to Human warriors randomly.<br><br>\n      If the assigned Line of Action is cancelled, the Action Dice may be\n      rerolled once.`,\n    phase: PHASES.INITIATIVE,\n  },\n  SUICIDE_ATTACK: {\n    name: 'Suicide Attack',\n    description: `Choose 1 Troglodyte attacking this phase.\n      It will gain <strong>+2 CBT</strong> for the attack.<br><br>\n      Then remove the Troglodyte from the game.`,\n    phase: PHASES.DEMON_ACTION,\n    checkRelevent: game => game.trogsInPlay > 0,\n  },\n  TERROR: {\n    name: 'Terror',\n    getDescription: game => {\n      if (game.scenario === 'THE_SURVIVORS') {\n        return `Pick a Human warrior closest to the tile with Fresh Air (or\n          closest to the Exit tile if it has already been placed) and move him\n          to an adjacent tile away from the Fresh Air (or Exit tile),\n          connected by an opening, without exceeding the tile limit.\n          Ignore the Blocking rule`\n      }\n      return `Pick a random Human warrior and move him to a random adjacent\n        tile, connected by an opening, without exceeding the tile limit.\n        Ignore the Blocking rule.`\n    },\n    phase: PHASES.THREAT,\n  },\n  THEY_ARE_LEGION: {\n    name: 'They Are Legion',\n    description: `All Troglodytes gain +1 DEF during this phase.`,\n    phase: PHASES.HUMAN_ACTION,\n  },\n  TOUGH_TROGLODYTE: {\n    name: 'Tough Troglodyte',\n    getDescription: game => {\n      if (game.scenario === 'THE_SURVIVORS') {\n        return `Place a Tough Troglodyte on the tile with the Fresh Air (or\n          closest to the Exit tile if it has already been placed).<br><br>\n          This Troglodyte will have the following stats: <strong>MVT 2, CBT 1,\n          DEF 5</strong> and is <strong>Frantic</strong>.<br><br>\n          This Troglodyte must be considered individually during combat\n          (like a Demon). It is represented by placing the relevant token next\n          to a regular Troglodyte miniature.`\n      }\n      return `Place a Tough Troglodyte on the tile with the most Human\n        warriors.<br><br>\n        This Troglodyte will have the following stats: <strong>MVT 2, CBT 1,\n        DEF 5</strong> and is <strong>Frantic</strong>.<br><br>\n        This Troglodyte must be considered individually during combat\n        (like a Demon). It is represented by placing the relevant token next\n        to a regular Troglodyte miniature.`\n    },\n    phase: PHASES.THREAT,\n    complete: game => (game.toughTrogsInPlay = game.toughTrogsInPlay + 1),\n  },\n  TOXIC_FUMES: {\n    name: 'Toxic Fumes',\n    description: `Roll a die for each Human warrior on the tile with the most\n      human warriors. The Human warriors suffer a hit on a die result of 3 or\n      more.`,\n    phase: PHASES.THREAT,\n  },\n  TRAP: {\n    name: 'Trap',\n    description: `Apply 1 hit to the Human warrior with the most hits\n      (you may choose if tied).`,\n    phase: PHASES.THREAT,\n  },\n  UNDER_THE_SIGN_OF_SATAN: {\n    name: 'Under the Sign of Satan',\n    description: `The Demon gains <strong>+1 MVT</strong>,\n      <strong>+1 CBT</strong> and <strong>+1 DEF</strong> until the beginning\n      of the next Threat Phase. Place the appropriate token on their reference\n      card.`,\n    phase: PHASES.THREAT,\n    checkRelevent: game => game.demonsInPlay > 0,\n  },\n}\n\nexport { SCENARIOS, PHASES, THREAT_PHASE_STEPS, DEMON_WARRIORS, EVENTS }\n","import { decorate, observable } from 'mobx'\nimport {\n  DEMON_WARRIORS,\n  SCENARIOS,\n  PHASES,\n  THREAT_PHASE_STEPS,\n  EVENTS,\n} from './config'\n\nclass GameStore {\n  scenario = null\n  turn = 1\n  phase = PHASES.INITIATIVE\n  demonsInPlay = 0\n  demonsAdded = 0\n  trogsInPlay = 0\n  toughTrogsInPlay = 0\n  demonDice = 6\n  threatDice = 6\n  threatRoll = 0\n  threatStep = null\n  eventRequired = false\n  legalPlacement = false\n  trogsFar = false\n  trogsClose = false\n  trogsSupernaturalSpeed = false\n  trogsSharpenedClaws = false\n  oilForYourLamp = false\n  event = null\n\n  startGame(scenario) {\n    this.scenario = scenario\n    this.startPhase(PHASES.INITIATIVE)\n  }\n\n  startPhase(phase) {\n    this.checkEventPlays(phase)\n    this.phase = phase\n  }\n\n  completePhase(phase) {\n    this.maybeRemoveEvent(phase)\n  }\n\n  maybeRequireEvent() {\n    if (\n      !this.oilForYourLamp &&\n      !this.event &&\n      this.getRandomNumber(1, this.trogsInPlay) === this.trogsInPlay\n    ) {\n      this.eventRequired = true\n    }\n  }\n\n  drawEvent() {\n    const keys = Object.keys(EVENTS)\n    const key = keys[this.getRandomNumber(0, keys.length - 1)]\n    const eventConfig = EVENTS[key]\n    this.event = {\n      key,\n      name: eventConfig.name,\n      description: eventConfig.getDescription\n        ? eventConfig.getDescription(this)\n        : eventConfig.description,\n      phase: eventConfig.phase,\n    }\n    this.eventRequired = false\n  }\n\n  checkEventPlays(phase) {\n    if (\n      this.event &&\n      this.event.phase === phase &&\n      EVENTS[this.event.key].checkRelevent &&\n      !EVENTS[this.event.key].checkRelevent(this)\n    ) {\n      this.removeEvent()\n    }\n  }\n\n  maybeRemoveEvent(phase) {\n    if (this.event && this.event.phase === phase) {\n      this.removeEvent()\n    }\n  }\n\n  removeEvent(skip = false) {\n    if (!skip && this.event.complete) {\n      this.event.complete(this)\n    }\n    this.event = null\n  }\n\n  completeInitiativePhase() {\n    this.completePhase(PHASES.INITIATIVE)\n    this.startPhase(PHASES.HUMAN_ACTION)\n  }\n\n  addDemon() {\n    this.demonsInPlay = this.demonsInPlay + 1\n  }\n\n  removeDemon() {\n    this.demonsInPlay = this.demonsInPlay - 1\n  }\n\n  removeTrog() {\n    this.maybeRequireEvent()\n    this.trogsInPlay = this.trogsInPlay - 1\n  }\n\n  removeToughTrog() {\n    this.toughTrogsInPlay = this.toughTrogsInPlay - 1\n  }\n\n  auraOfBlessing() {\n    this.threatDice = Math.max(0, this.threatDice - 2)\n  }\n\n  setOilForYourLamp() {\n    this.oilForYourLamp = true\n  }\n\n  demonicMechanismTile() {\n    this.threatDice = Math.min(6, this.threatDice + 2)\n  }\n\n  anyOtherTile() {\n    if (this.scenario === 'HIT_THEM_WHERE_IT_HURTS' && this.threatDice >= 3) {\n      this.threatDice = Math.max(0, this.threatDice - 2)\n      this.trogsInPlay = this.trogsInPlay + 2\n    }\n  }\n\n  completeHumanActionPhase() {\n    this.completePhase(PHASES.HUMAN_ACTION)\n    this.startPhase(PHASES.THREAT)\n    this.threatRoll = this.getRandomNumber()\n    this.initThreatPhase()\n  }\n\n  initThreatPhase() {\n    let lowerDemonDie = false\n\n    if (this.eventRequired) {\n      this.drawEvent()\n    }\n    if (this.event && this.event.phase === PHASES.THREAT) {\n      this.threatStep = THREAT_PHASE_STEPS.THREAT_EVENT\n      return\n    }\n    if (\n      !this.demonsInPlay &&\n      this.demonsAdded < SCENARIOS[this.scenario].demonLimit\n    ) {\n      if (this.threatRoll > this.demonDice) {\n        this.threatStep = THREAT_PHASE_STEPS.CHECK_LEGAL_PLACEMENT\n        return\n      }\n      lowerDemonDie = true\n    }\n    if (this.trogsInPlay < this.threatDice) {\n      this.threatStep = THREAT_PHASE_STEPS.CHECK_LEGAL_PLACEMENT\n      return\n    }\n    if (lowerDemonDie) {\n      this.demonDice = this.demonDice - 1\n    }\n    this.threatStep = THREAT_PHASE_STEPS.CHECK_TROGS_DISTANCE\n  }\n\n  completeThreatLegalPlacementStep() {\n    if (\n      !this.demonsInPlay &&\n      this.demonsAdded < SCENARIOS[this.scenario].demonLimit\n    ) {\n      if (this.threatRoll > this.demonDice) {\n        this.threatStep = THREAT_PHASE_STEPS.SPAWN_DEMON\n        return\n      }\n      this.demonDice = this.demonDice - 1\n    }\n    this.threatStep = THREAT_PHASE_STEPS.SPAWN_TROGS\n  }\n\n  completeThreatEventStep() {\n    this.event = null\n    this.initThreatPhase()\n  }\n\n  completeThreatSpawnDemonStep() {\n    this.demonsInPlay = 1\n    this.demonsAdded = this.demonsAdded + 1\n    this.demonDice = 6\n    this.completeThreatPhase()\n  }\n\n  completeThreatSpawnTrogsStep(trogsAdded) {\n    this.threatDice = this.threatDice - 1\n    this.trogsInPlay = this.trogsInPlay + trogsAdded\n    this.threatStep = THREAT_PHASE_STEPS.CHECK_TROGS_DISTANCE\n  }\n\n  completeThreatPhase() {\n    this.completePhase(PHASES.THREAT)\n    this.threatStep = null\n    if (this.threatDice >= 1 && this.trogsFar) {\n      this.trogsSupernaturalSpeed = true\n      this.threatDice = this.threatDice - 2\n    }\n    if (this.scenario === 'THE_RITUAL' && this.demonsInPlay) {\n      this.trogsSharpenedClaws = true\n    } else if (this.threatDice >= 1 && this.trogsClose) {\n      this.trogsSharpenedClaws = true\n      this.threatDice = this.threatDice - 1\n    }\n    if (this.threatDice < 1) {\n      this.threatDice = this.getRandomNumber()\n    }\n    this.startPhase(PHASES.DEMON_ACTION)\n  }\n\n  completeDemonActionPhase() {\n    this.completePhase(PHASES.DEMON_ACTION)\n    this.legalPlacement = false\n    this.trogsFar = false\n    this.trogsClose = false\n    this.trogsSupernaturalSpeed = false\n    this.trogsSharpenedClaws = false\n    this.oilForYourLamp = false\n    this.startPhase(PHASES.INITIATIVE)\n    this.turn = this.turn + 1\n  }\n\n  getRandomNumber(min = 1, max = 6) {\n    return Math.floor(Math.random() * max) + min\n  }\n\n  getDemon() {\n    return DEMON_WARRIORS[SCENARIOS[this.scenario].demon] || {}\n  }\n}\n\nexport default decorate(GameStore, {\n  scenario: observable,\n  turn: observable,\n  phase: observable,\n  demonsInPlay: observable,\n  trogsInPlay: observable,\n  demonDice: observable,\n  threatDice: observable,\n  threatRoll: observable,\n  threatStep: observable,\n  legalPlacement: observable,\n  trogsFar: observable,\n  trogsClose: observable,\n  trogsSupernaturalSpeed: observable,\n  trogsSharpenedClaws: observable,\n  oilForYourLamp: observable,\n  event: observable,\n})\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Modal, Portal } from 'semantic-ui-react'\n\nclass RulesSummaryButton extends PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = {\n      open: props.open || false,\n    }\n  }\n\n  handleOpen = () => {\n    this.setState({ open: true })\n  }\n\n  handleClose = () => {\n    this.setState({ open: false })\n  }\n\n  render() {\n    const { as: ButtonComponent, ...buttonProps } = this.props\n    const { open } = this.state\n\n    // use a Portal in order to support a Dropdown.Item trigger component\n    return (\n      <Portal\n        open={open}\n        closeOnTriggerClickk={false}\n        openOnTriggerClick\n        trigger={<ButtonComponent {...buttonProps} />}\n        onOpen={this.handleOpen}\n        onClose={this.handleClose}\n      >\n        <Modal open closeOnDimmerClick={false}>\n          <Modal.Header>Rules Summary</Modal.Header>\n          <Modal.Content>\n            <div>\n              <p>\n                <strong>General</strong>: Play with the rules from the{' '}\n                <strong>Claustrophbia</strong> board game, unless stated\n                otherwise by this app.\n              </p>\n              <p>\n                <strong>Setup</strong>: Event cards, Demon cards, Threat Point\n                tokens and the Board of Destiny are not needed, as they will be\n                replaced by this app.\n              </p>\n              <p>\n                <strong>Tile Placement</strong>: The Human player decides the\n                orientation when placing tiles.\n              </p>\n              <p>\n                <strong>Hole in the Ground</strong>: This tile should be treated\n                as a <strong>Lair</strong> tile instead.\n              </p>\n              <p>\n                <strong>Demonic Mechanism</strong>: This tile has changed to\n                increase the Threat Die by 2, when placed.\n              </p>\n              <p>\n                <strong>Oil for your lamp</strong>: This advantage has been\n                modified to prevent an event card from being drawn on that turn,\n                in addition to cancelling the effect of the{' '}\n                <strong>Demonic Mechanism</strong> tile.\n              </p>\n              <p>\n                <strong>Aura of Blessing</strong>: This gift has changed to\n                reduce the Threat Die by 2.\n              </p>\n            </div>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button content=\"Close\" onClick={this.handleClose} />\n          </Modal.Actions>\n        </Modal>\n      </Portal>\n    )\n  }\n}\n\nRulesSummaryButton.defaultProps = {\n  as: Button,\n}\n\nRulesSummaryButton.propTypes = {\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n}\n\nexport default RulesSummaryButton\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Divider, Header, Modal, Portal } from 'semantic-ui-react'\n\nclass DemonAISummaryButton extends PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = {\n      open: props.open || false,\n    }\n  }\n\n  handleOpen = () => {\n    this.setState({ open: true })\n  }\n\n  handleClose = () => {\n    this.setState({ open: false })\n  }\n\n  render() {\n    const { as: ButtonComponent, ...buttonProps } = this.props\n    const { open } = this.state\n\n    // use a Portal in order to support a Dropdown.Item trigger component\n    return (\n      <Portal\n        open={open}\n        closeOnTriggerClickk={false}\n        openOnTriggerClick\n        trigger={<ButtonComponent {...buttonProps} />}\n        onOpen={this.handleOpen}\n        onClose={this.handleClose}\n      >\n        <Modal open closeOnDimmerClick={false}>\n          <Modal.Header>Demon AI Summary</Modal.Header>\n          <Modal.Content>\n            <div>\n              <Header as=\"h4\">\n                <Header.Content>\n                  <span style={{ color: 'red' }}>Demon Die</span>\n                  <Header.Subheader>\n                    Determines when a Demon will be added\n                  </Header.Subheader>\n                </Header.Content>\n              </Header>\n              <p>\n                During the Threat phase, if there is no demon in play, then a d6\n                is rolled. If the result exceeds the Demon Die, then a demon is\n                added and the Demon Die is reset to 6. If the result does not,\n                then the Demon Die is reduced by 1.\n              </p>\n              <p>\n                Where the Demon is added will depend on the scenario and the\n                situation. The scenario will limit the number of times a Demon\n                can be added.\n              </p>\n              <Divider />\n              <Header as=\"h4\">\n                <Header.Content>\n                  <span style={{ color: 'blue' }}>Threat Die</span>\n                  <Header.Subheader>\n                    Determines when Troglodytes will be added (mostly)\n                  </Header.Subheader>\n                </Header.Content>\n              </Header>\n              <p>\n                During the Threat phase, if no demon has just been added, and\n                the number of Troglodytes in play is less than the Threat Die,\n                then Troglodytes will be added and then the Threat Die is\n                reduced by 1.\n              </p>\n              <p>\n                All Troglodytes may gain <strong>Supernatural Speed</strong>{' '}\n                and/or <strong>Sharpened Claws</strong> depending on their\n                proximity to Human warriors, further reducing the Threat Die.\n                When the Threat Die reaches 0, it is rolled again.\n              </p>\n              <p>\n                Where the Troglodytes are added will depend on the scenario and\n                the situation.\n              </p>\n              <Divider />\n              <Header as=\"h4\">\n                <Header.Content>\n                  Events\n                  <Header.Subheader>\n                    Removing Troglogytes increases the chance that the Demon AI\n                    will draw an event card during the next Threat phase.\n                  </Header.Subheader>\n                </Header.Content>\n              </Header>\n              <p>\n                The odds of drawing a card increase, the more Troglodytes are\n                removed and the fewer that remain (percent chance = 1 / # of\n                Troglodytes before removal). Removing a Troglodye, when there\n                are 5 remaining, results in 20% chance of drawing an Event.\n                Removing the last Troglodyte will guarantee that an event will\n                be drawn.\n              </p>\n              <p>\n                Only up to 1 Event will be drawn per turn. If the Event is not\n                applicable, it will be discarded. For example, drawing{' '}\n                <strong>Suicide Attack</strong>, when there are no Troglodytes\n                in play, will be discarded.\n              </p>\n              <p>\n                The <strong>Trap</strong> and <strong>They Are Legion</strong>{' '}\n                actions from the Board of Destiny have been converted to Events.\n              </p>\n              <p />\n            </div>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button content=\"Close\" onClick={this.handleClose} />\n          </Modal.Actions>\n        </Modal>\n      </Portal>\n    )\n  }\n}\n\nDemonAISummaryButton.defaultProps = {\n  as: Button,\n}\n\nDemonAISummaryButton.propTypes = {\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n}\n\nexport default DemonAISummaryButton\n","import React, { Component } from 'react'\nimport { Button, Dropdown } from 'semantic-ui-react'\nimport RulesSummaryButton from './RulesSummaryButton'\nimport DemonAISummaryButton from './DemonAISummaryButton'\nimport { SCENARIOS } from './config'\n\nclass Welcome extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { scenario: undefined }\n  }\n\n  render() {\n    const { game } = this.props\n    const { scenario } = this.state\n\n    return (\n      <div>\n        <p>\n          Welcome to the <strong>Demon AI</strong> app for playing the{' '}\n          <strong>Claustrophobia</strong> the board game (by CROC) with a single\n          player.\n        </p>\n        <p>\n          The rules for how to play using this app are{' '}\n          <RulesSummaryButton as=\"a\" style={{ cursor: 'pointer' }}>\n            here\n          </RulesSummaryButton>\n          .\n        </p>\n        <p>\n          A summary for how the Demon AI plays is{' '}\n          <DemonAISummaryButton as=\"a\" style={{ cursor: 'pointer' }}>\n            here\n          </DemonAISummaryButton>\n          .\n        </p>\n        <p>\n          This app is based on a solo variant written by Reverend Uncle Bastard\n          (on BGG), but the app includes several changes (mainly to introduce\n          events). The original variant can be found{' '}\n          <a\n            target=\"_\"\n            href=\"https://www.boardgamegeek.com/thread/1307964/claustrophobia-solo-variant-demon-ai-now-hellhound\"\n          >\n            here\n          </a>{' '}\n          .\n        </p>\n        <p>To begin, pick a scenario below and start the game!</p>\n        <Dropdown\n          placeholder=\"Pick a Scenario...\"\n          search\n          selection\n          options={Object.keys(SCENARIOS).map(key => ({\n            key,\n            value: key,\n            text: SCENARIOS[key].name,\n          }))}\n          onChange={(event, { value }) => this.setState({ scenario: value })}\n          fluid\n        />\n        <br />\n        <Button.Group vertical fluid>\n          <Button\n            primary\n            fluid\n            disabled={!scenario}\n            onClick={() => game.startGame(scenario)}\n          >\n            Start Game\n          </Button>\n        </Button.Group>\n      </div>\n    )\n  }\n}\n\nexport default Welcome\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport renderHTML from 'react-render-html'\nimport {\n  Button,\n  Grid,\n  Label,\n  List,\n  Popup,\n  Rating,\n  Segment,\n} from 'semantic-ui-react'\nimport { DEMON_WARRIORS } from './config'\n\nconst DemonWarriorItem = ({ numberInPlay, onRemove, warrior }) => {\n  if (numberInPlay)\n    return (\n      <List.Item>\n        <List.Content>\n          <Popup\n            inverted\n            trigger={\n              <Button\n                icon=\"remove\"\n                floated=\"right\"\n                size=\"tiny\"\n                onClick={onRemove}\n                compact\n                basic\n              />\n            }\n          >\n            {`Remove 1 ${warrior.name}`}.\n          </Popup>\n\n          <Popup\n            inverted\n            trigger={\n              <List.Header as=\"a\">\n                <Label circular horizontal>\n                  {numberInPlay}\n                </Label>\n                {`${warrior.name}${numberInPlay > 1 ? 's' : ''}`}\n                {warrior.health > 1 && (\n                  <Rating\n                    icon=\"heart\"\n                    defaultRating={0}\n                    maxRating={warrior.health}\n                    size=\"tiny\"\n                  />\n                )}\n              </List.Header>\n            }\n          >\n            <div>\n              <Label content={`${warrior.movement} MVT`} />{' '}\n              <Label content={`${warrior.combat} CBT`} />{' '}\n              <Label content={`${warrior.defense} DEF`} />\n              {!!warrior.rules && <div>{renderHTML(warrior.rules)}</div>}\n            </div>\n          </Popup>\n        </List.Content>\n      </List.Item>\n    )\n  return null\n}\n\nconst GameStateSummary = ({ game }) => {\n  const demonWarriors =\n    game.demonsInPlay + game.toughTrogsInPlay + game.trogsInPlay\n  return (\n    <Segment style={{ padding: '10px 10px 10px 10px' }}>\n      <Grid stackable={false}>\n        <Grid.Row stretched>\n          <Grid.Column width={5} verticalAlign=\"middle\">\n            <div>\n              <strong>Turn: {game.turn}</strong>\n              <br />\n              <Popup\n                inverted\n                trigger={\n                  <Label color=\"red\" size=\"large\" content={game.demonDice} />\n                }\n              >\n                <strong>Demon Die</strong>: During the Threat phase, if a d6\n                roll exeeds this value, a Demon will be added. Otherwise, this\n                value is reduced by 1.\n              </Popup>\n              <Popup\n                inverted\n                trigger={\n                  <Label color=\"blue\" size=\"large\" content={game.threatDice} />\n                }\n              >\n                <strong>Threat Die</strong>: If no Demon is added during the\n                Threat phase, and there are fewer Troglodytes in play than this\n                value, then Troglodytes will be added.\n              </Popup>\n            </div>\n          </Grid.Column>\n          <Grid.Column width={11} verticalAlign=\"middle\">\n            {!!demonWarriors && (\n              <List>\n                <DemonWarriorItem\n                  numberInPlay={game.demonsInPlay}\n                  onRemove={() => game.removeDemon()}\n                  warrior={game.getDemon()}\n                />\n                <DemonWarriorItem\n                  numberInPlay={game.toughTrogsInPlay}\n                  onRemove={() => game.removeToughTrog()}\n                  warrior={DEMON_WARRIORS['TOUGH_TROGLODYTE']}\n                />\n                <DemonWarriorItem\n                  numberInPlay={game.trogsInPlay}\n                  onRemove={() => game.removeTrog()}\n                  warrior={DEMON_WARRIORS['TROGLODYTE']}\n                />\n              </List>\n            )}\n            {!demonWarriors && <span>No Demon warriors in play</span>}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  )\n}\n\nexport default observer(GameStateSummary)\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Step } from 'semantic-ui-react'\n\nconst PHASES = [\n  { name: 'INITIATIVE', text: 'Initiative' },\n  { name: 'HUMAN_ACTION', text: 'Human', text2: 'Actions' },\n  { name: 'THREAT', text: 'Threat' },\n  { name: 'DEMON_ACTION', text: 'Demon', text2: 'Actions' },\n]\n\nconst GamePhaseHeader = ({ game }) => (\n  <Step.Group unstackable fluid>\n    {PHASES.map(phase => (\n      <Step\n        key={phase.name}\n        active={game.phase === phase.name}\n        disabled={game.phase !== phase.name}\n        style={{ padding: '5px 0px 5px 0px' }}\n      >\n        <Step.Content>\n          <Step.Description>{phase.text}</Step.Description>\n          {!!phase.text2 && <Step.Description>{phase.text2}</Step.Description>}\n        </Step.Content>\n      </Step>\n    ))}\n  </Step.Group>\n)\n\nexport default observer(GamePhaseHeader)\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Dropdown, Message } from 'semantic-ui-react'\nimport renderHTML from 'react-render-html'\n\nconst EventMessage = ({ game }) => {\n  if (game.event) {\n    return (\n      <Message negative>\n        <div style={{ float: 'right' }}>\n          <Dropdown text=\"\" error>\n            <Dropdown.Menu direction=\"left\">\n              <Dropdown.Item\n                text=\"Cancel Event\"\n                onClick={() => game.removeEvent(true)}\n              />\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n        <Message.Header>{game.event.name}</Message.Header>\n        <Message.Content>\n          {renderHTML(game.event.description || '')}\n        </Message.Content>\n      </Message>\n    )\n  }\n  return (\n    <Message negative>\n      <Message.Content>Event cancelled</Message.Content>\n    </Message>\n  )\n}\n\nexport default observer(EventMessage)\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Button, Icon } from 'semantic-ui-react'\nimport EventMessage from './EventMessage'\n\nconst InitiativePhase = ({ game }) => (\n  <div>\n    {!!game.event &&\n      game.event.phase === 'INITIATIVE' && <EventMessage game={game} />}\n    <p>Play this phase normally.</p>\n    <Button.Group vertical fluid>\n      {!game.oilForYourLamp && (\n        <Button onClick={() => game.setOilForYourLamp()}>\n          <Icon name=\"tint\" /> Oil For Your Lamp\n        </Button>\n      )}\n      <Button primary fluid onClick={() => game.completeInitiativePhase()}>\n        <Icon name=\"play\" /> Next Phase\n      </Button>\n    </Button.Group>\n  </div>\n)\n\nexport default observer(InitiativePhase)\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Button, Icon } from 'semantic-ui-react'\nimport EventMessage from './EventMessage'\n\nconst HumanActionPhase = ({ game }) => (\n  <div>\n    {!!game.event &&\n      game.event.phase === 'HUMAN_ACTION' && <EventMessage game={game} />}\n    <p>Record removed warriors and the following actions below:</p>\n    <Button.Group vertical fluid>\n      <Button onClick={() => game.auraOfBlessing()}>\n        <Icon name=\"heart\" /> Aura of Blessing\n      </Button>\n      {!game.oilForYourLamp && (\n        <Button onClick={() => game.demonicMechanismTile()}>\n          <Icon name=\"cog\" /> Demonic Mechanism tile\n        </Button>\n      )}\n      {game.scenario === 'HIT_THEM_WHERE_IT_HURTS' &&\n        !game.demonsInPlay && (\n          <Button onClick={() => game.addDemon()}>\n            <Icon name=\"star outline\" /> Pentacle Room tile\n          </Button>\n        )}\n      {game.scenario === 'HIT_THEM_WHERE_IT_HURTS' &&\n        game.threatDice >= 3 && (\n          <Button onClick={() => game.anyOtherTile()}>\n            <Icon name=\"square plus outline\" /> Any other tile\n          </Button>\n        )}\n      <Button primary onClick={() => game.completeHumanActionPhase()}>\n        <Icon name=\"play\" /> Next Phase\n      </Button>\n    </Button.Group>\n  </div>\n)\n\nexport default observer(HumanActionPhase)\n","import React, { Component } from 'react'\nimport { observer } from 'mobx-react'\nimport { Button, Checkbox, Icon, Input, Message } from 'semantic-ui-react'\nimport EventMessage from './EventMessage'\n\nconst ThreatEventStep = ({ game }) => (\n  <div>\n    <EventMessage game={game} />\n    <Button.Group vertical fluid>\n      <Button primary onClick={() => game.completeThreatEventStep()}>\n        <Icon name=\"play\" /> Next\n      </Button>\n    </Button.Group>\n  </div>\n)\n\nconst CheckLegalPlacementStep = ({ game }) => (\n  <div>\n    <Checkbox\n      label={`At least 1 legal placement for Demon warriors within 4 tiles of\n        a Human warrior?`}\n      onChange={() => (game.legalPlacement = !game.legalPlacement)}\n      checked={game.legalPlacement}\n    />\n    <br />\n    <br />\n    <Button.Group vertical fluid>\n      <Button primary onClick={() => game.completeThreatLegalPlacementStep()}>\n        <Icon name=\"play\" /> Next\n      </Button>\n    </Button.Group>\n  </div>\n)\n\nconst SpawnDemonStep = ({ game }) => (\n  <div>\n    {!game.legalPlacement && (\n      <Message negative>\n        <Message.Header>A Taste for Blood</Message.Header>\n        <Message.Content>\n          Human warriors cannot prevent the appearance of Demons.\n        </Message.Content>\n      </Message>\n    )}\n    {game.scenario !== 'THE_SURVIVORS' && (\n      <p>\n        Add the <strong>{game.getDemon().name}</strong> to the unexplored\n        opening closest to the tile with the largest group of humans.\n      </p>\n    )}\n    {game.scenario === 'THE_SURVIVORS' && (\n      <p>\n        Add the <strong>{game.getDemon().name}</strong> to the unexplored\n        opening closest to the tile with Fresh Air.\n      </p>\n    )}\n    {game.legalPlacement && (\n      <p>\n        <i>(Obey legal placement: Human warriors block tiles)</i>\n      </p>\n    )}\n    <Button.Group vertical fluid>\n      <Button primary onClick={() => game.completeThreatSpawnDemonStep()}>\n        <Icon name=\"play\" /> Next Phase\n      </Button>\n    </Button.Group>\n  </div>\n)\n\nclass SpawnTrogsStep extends Component {\n  constructor(props) {\n    super(props)\n    const maxTrogs = props.game.legalPlacement\n      ? props.game.threatDice\n      : Math.min(props.game.threatDice, 3)\n    this.state = { trogsAdded: maxTrogs, maxTrogs }\n  }\n\n  render = () => {\n    const { game } = this.props\n    const { trogsAdded, maxTrogs } = this.state\n    return (\n      <div>\n        {!game.legalPlacement && (\n          <Message negative>\n            <Message.Header>A Taste for Blood</Message.Header>\n            <Message.Content>\n              Human warriors cannot prevent the appearance of Troglodytes.\n            </Message.Content>\n          </Message>\n        )}\n        {game.scenario !== 'THE_SURVIVORS' && (\n          <p>\n            Add up to <strong>{maxTrogs}</strong> Troglogytes to unexplored\n            openings closest to the tile with the largest group of humans.\n          </p>\n        )}\n        {game.scenario === 'THE_SURVIVORS' && (\n          <p>\n            Add up to <strong>{maxTrogs}</strong> Troglogytes to unexplored\n            openings closest to the tile with Fresh Air.\n          </p>\n        )}\n        {game.scenario === 'THE_RITUAL' &&\n          !!game.demonsInPlay && (\n            <p>\n              Add <strong>1</strong> additional Troglodyte because the{' '}\n              <strong>Demon of Cruelty</strong> is in play.\n            </p>\n          )}\n        {game.legalPlacement && (\n          <p>\n            <i>(Obey legal placement: Human warriors block tiles)</i>\n          </p>\n        )}\n        <p>\n          <i>(Obey limit: 3 Demon warriors per tile, 1 per corridor)</i>\n        </p>\n        <Input\n          label=\"Troglogytes added\"\n          placeholder=\"0\"\n          type=\"number\"\n          min={0}\n          max={6}\n          value={trogsAdded}\n          onChange={(event, { value }) => this.setState({ trogsAdded: value })}\n          fluid\n        />\n        <br />\n        <Button.Group vertical fluid>\n          <Button\n            primary\n            disabled={!trogsAdded}\n            onClick={() =>\n              game.completeThreatSpawnTrogsStep(parseInt(trogsAdded))\n            }\n          >\n            <Icon name=\"play\" /> Next\n          </Button>\n        </Button.Group>\n      </div>\n    )\n  }\n}\n\nconst CheckTrogsDistanceStep = ({ game }) => (\n  <div>\n    <Checkbox\n      label=\"Any Troglogytes 2 or more tiles away from a human?\"\n      onChange={() => (game.trogsFar = !game.trogsFar)}\n      checked={game.trogsFar}\n    />\n    <br />\n    <br />\n    <Checkbox\n      label=\"Any Troglogytes adjacent to or on the same tile as a human?\"\n      onChange={() => (game.trogsClose = !game.trogsClose)}\n      checked={game.trogsClose}\n    />\n    <br />\n    <br />\n    <Button.Group vertical fluid>\n      <Button primary onClick={() => game.completeThreatPhase()}>\n        <Icon name=\"play\" /> Next Phase\n      </Button>\n    </Button.Group>\n  </div>\n)\n\nconst STEPS_CONFIG = {\n  THREAT_EVENT: { component: observer(ThreatEventStep) },\n  CHECK_LEGAL_PLACEMENT: { component: observer(CheckLegalPlacementStep) },\n  SPAWN_DEMON: { component: observer(SpawnDemonStep) },\n  SPAWN_TROGS: { component: observer(SpawnTrogsStep) },\n  CHECK_TROGS_DISTANCE: { component: observer(CheckTrogsDistanceStep) },\n}\n\nconst ThreatPhase = ({ game }) => {\n  const StepComponent = STEPS_CONFIG[game.threatStep].component\n  return (\n    <div>\n      <StepComponent game={game} />\n    </div>\n  )\n}\n\nexport default observer(ThreatPhase)\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport InitiativePhase from './InitiativePhase'\nimport HumanActionPhase from './HumanActionPhase'\nimport ThreatPhase from './ThreatPhase'\nimport DemonActionPhase from './DemonActionPhase'\n\nconst PHASES = {\n  INITIATIVE: InitiativePhase,\n  HUMAN_ACTION: HumanActionPhase,\n  THREAT: ThreatPhase,\n  DEMON_ACTION: DemonActionPhase,\n}\n\nconst GamePhaseBody = ({ game }) => {\n  const BodyComponent = PHASES[game.phase]\n  return <BodyComponent game={game} />\n}\n\nexport default observer(GamePhaseBody)\n","import React from 'react'\nimport { Button, Icon, Message } from 'semantic-ui-react'\nimport EventMessage from './EventMessage'\n\nconst DemonActionPhase = ({ game }) => (\n  <div>\n    {!!game.event &&\n      game.event.phase === 'DEMON_ACTION' && <EventMessage game={game} />}\n    {game.trogsSupernaturalSpeed && (\n      <Message negative>\n        <Message.Header>Supernatural Speed</Message.Header>\n        <Message.Content>\n          All Troglodytes gain <strong>+1 MVT</strong>.\n        </Message.Content>\n      </Message>\n    )}\n    {game.trogsSharpenedClaws && (\n      <Message negative>\n        <Message.Header>Sharpened Claws</Message.Header>\n        <Message.Content>\n          All Troglodytes are <strong>Frantic</strong>.\n        </Message.Content>\n      </Message>\n    )}\n    {game.scenario === 'THE_RITUAL' &&\n      !!game.demonsInPlay && (\n        <p>\n          The <strong>Demon of Cruelty</strong> will not move.\n        </p>\n      )}\n    {game.scenario === 'THE_RITUAL' && (\n      <p>\n        All Troglodytes will attempt to move towards the Redeemer in the\n        Pentacle Room. If they are forced to stop by any human warriors they\n        will attack.\n      </p>\n    )}\n    {game.scenario !== 'THE_RITUAL' && (\n      <p>\n        All Demon warriors move towards the closest human group (largest group\n        if tied).\n      </p>\n    )}\n    <p>\n      All Demon warriors attack the most wounded member of the group (lowest\n      defense if tied).\n    </p>\n    <p>\n      <i>(Obey limit: 3 Demon warriors per tile, 1 per corridor)</i>\n    </p>\n    <Button.Group vertical fluid>\n      <Button primary onClick={() => game.completeDemonActionPhase()}>\n        <Icon name=\"play\" /> Next Phase\n      </Button>\n    </Button.Group>\n  </div>\n)\n\nexport default DemonActionPhase\n","import React, { Component } from 'react'\nimport { observer } from 'mobx-react'\nimport { Container, Dropdown } from 'semantic-ui-react'\nimport Welcome from './Welcome'\nimport GameStateSummary from './GameStateSummary'\nimport GamePhaseHeader from './GamePhaseHeader'\nimport GamePhaseBody from './GamePhaseBody'\nimport RulesSummaryButton from './RulesSummaryButton'\nimport DemonAISummaryButton from './DemonAISummaryButton'\nimport { SCENARIOS } from './config'\n\nconst MainMenu = ({ top, width }) => (\n  <div\n    style={{\n      position: 'absolute',\n      zIndex: '1000',\n      top: `${top}px`,\n      width: `${width}px`,\n    }}\n  >\n    <div style={{ float: 'right' }}>\n      <Dropdown icon=\"bars\" direction=\"left\" style={{ color: 'white' }}>\n        <Dropdown.Menu>\n          <Dropdown.Item\n            icon=\"refresh\"\n            text=\"Restart\"\n            onClick={() => window.location.reload()}\n          />\n          <RulesSummaryButton icon=\"book\" text=\"Rules\" as={Dropdown.Item} />\n          <DemonAISummaryButton icon=\"bug\" text=\"Demon AI\" as={Dropdown.Item} />\n        </Dropdown.Menu>\n      </Dropdown>\n    </div>\n  </div>\n)\n\nconst ScenarioTitle = ({ scenario, top }) => {\n  if (scenario) {\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          left: '50%',\n          top: '115px',\n          zIndex: '1000',\n        }}\n      >\n        <div\n          style={{\n            position: 'relative',\n            left: '-50%',\n          }}\n        >\n          <strong>{SCENARIOS[scenario].name}</strong>\n        </div>\n      </div>\n    )\n  }\n  return null\n}\n\nclass App extends Component {\n  render() {\n    const { game } = this.props\n    return (\n      <Container>\n        <div\n          style={{\n            maxWidth: '352px',\n            margin: '0 auto',\n            background: 'white',\n            marginTop: '10px',\n          }}\n        >\n          <img\n            src=\"images/title.png\"\n            alt=\"Claustrophobia\"\n            style={{ width: '352px', height: '128px' }}\n          />\n\n          <MainMenu top={110} width={352} />\n          <ScenarioTitle top={115} scenario={game.scenario} />\n\n          <div style={{ padding: '5px 10px 10px 10px' }}>\n            {!game.scenario && <Welcome game={game} />}\n            {!!game.scenario && (\n              <div>\n                <GamePhaseHeader game={game} />\n                <GamePhaseBody game={game} />\n                <GameStateSummary game={game} />\n              </div>\n            )}\n          </div>\n        </div>\n      </Container>\n    )\n  }\n}\n\nexport default observer(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport GameStore from './GameStore'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App game={new GameStore()} />, document.getElementById('root'))\n\nserviceWorker.register()\n"],"sourceRoot":""}